From 5c92b4572d4b1d1f835f69516acc08aeee2c0c28 Mon Sep 17 00:00:00 2001
From: Florian Larysch <fl@n621.de>
Date: Fri, 25 Nov 2016 17:49:32 +0100
Subject: [PATCH] [DEV-2984] kernel: add a PHY driver for CS4340

The CS4340 PHY which we use for the 10G ports of the grizzly platform is
not compliant with either Clause 22 or Clause 45, so the generic Linux
subsystems which are supposed to handle this don't work correctly.

Add a minimal PHY driver which makes status reporting work.
---
 Documentation/devicetree/bindings/phy/cs4340.txt | 13 ++++
 drivers/net/phy/Kconfig                          |  5 ++
 drivers/net/phy/Makefile                         |  1 +
 drivers/net/phy/cs4340.c                         | 97 ++++++++++++++++++++++++
 4 files changed, 116 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/phy/cs4340.txt
 create mode 100644 drivers/net/phy/cs4340.c

diff --git a/Documentation/devicetree/bindings/phy/cs4340.txt b/Documentation/devicetree/bindings/phy/cs4340.txt
new file mode 100644
index 0000000..449004d
--- /dev/null
+++ b/Documentation/devicetree/bindings/phy/cs4340.txt
@@ -0,0 +1,13 @@
+Cortina CS4340
+--------------
+
+This PHY is incompatible with Clause 45 and thus needs some manual
+configuration to work. "compatible" must be set to
+"ethernet-phy-id13e5.1002", to force attaching the driver.
+
+Example:
+
+xfiphy1: ethernet-phy@10 {
+	compatible = "ethernet-phy-id13e5.1002";
+	reg = <0x10>;
+};
diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 60994a8..acb85da 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -54,6 +54,11 @@ config CICADA_PHY
 	---help---
 	  Currently supports the cis8204
 
+config CS4340_PHY
+	tristate "Driver for the Cortina CS4340 PHYs"
+	---help---
+	  Driver for the Cortina CS4340 PHY
+
 config VITESSE_PHY
         tristate "Drivers for the Vitesse PHYs"
         ---help---
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index f31a4e2..d01cb1f 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_BCM63XX_PHY)	+= bcm63xx.o
 obj-$(CONFIG_BCM7XXX_PHY)	+= bcm7xxx.o
 obj-$(CONFIG_BCM87XX_PHY)	+= bcm87xx.o
 obj-$(CONFIG_BCM_CYGNUS_PHY)	+= bcm-cygnus.o
+obj-$(CONFIG_CS4340_PHY)	+= cs4340.o
 obj-$(CONFIG_ICPLUS_PHY)	+= icplus.o
 obj-$(CONFIG_REALTEK_PHY)	+= realtek.o
 obj-$(CONFIG_LSI_ET1011C_PHY)	+= et1011c.o
diff --git a/drivers/net/phy/cs4340.c b/drivers/net/phy/cs4340.c
new file mode 100644
index 0000000..a5aaf9e
--- /dev/null
+++ b/drivers/net/phy/cs4340.c
@@ -0,0 +1,97 @@
+/*
+ * Driver for Cortina CS4340
+ */
+
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/unistd.h>
+#include <linux/init.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/mii.h>
+#include <linux/ethtool.h>
+#include <linux/phy.h>
+
+#define CS4340_GLOBAL_CHIP_ID_LSB 0x000
+#define CS4340_GLOBAL_CHIP_ID_MSB 0x001
+#define CS4340_GLOBAL_GPIO_1_INTS 0x017
+#define CS4340_GLOBAL_GPIO_2_INTS 0x01c
+
+#define CS4340_INTS_EDC_CONVERGED (1 << 3)
+
+MODULE_DESCRIPTION("Cortina CS4340 driver");
+MODULE_AUTHOR("Florian Larysch <florian.larysch@riverbed.com>");
+MODULE_LICENSE("GPL");
+
+static int cs4340_read(struct phy_device *phydev, u16 reg)
+{
+	return mdiobus_read(phydev->bus, phydev->addr, MII_ADDR_C45 | reg);
+}
+
+static int cs4340_probe(struct phy_device *phydev)
+{
+	struct cs4340_priv *priv;
+	u32 phy_id;
+
+	phy_id = (cs4340_read(phydev, CS4340_GLOBAL_CHIP_ID_LSB) << 16) |
+	          cs4340_read(phydev, CS4340_GLOBAL_CHIP_ID_MSB);
+
+	if ((phy_id & phydev->drv->phy_id_mask) !=
+	    (phydev->drv->phy_id & phydev->drv->phy_id_mask))
+		return -ENODEV;
+
+	phydev->supported = SUPPORTED_1000baseT_Full |
+		            SUPPORTED_10000baseT_Full;
+	phydev->advertising = phydev->supported;
+	phydev->autoneg = AUTONEG_DISABLE;
+	phydev->speed = 10000;
+	phydev->duplex = 1;
+
+	return 0;
+}
+
+static int cs4340_config_aneg(struct phy_device *phydev)
+{
+	return 0;
+}
+
+static int cs4340_read_status(struct phy_device *phydev)
+{
+	int status;
+
+	status = cs4340_read(phydev, CS4340_GLOBAL_GPIO_1_INTS);
+	if (status < 0)
+		return status;
+
+	phydev->link = !!(status & CS4340_INTS_EDC_CONVERGED);
+
+	return 0;
+}
+
+/*
+ * Note that this PHY does not have a phy_id in the sense of 802.3. Instead, it
+ * reexports its JTAG CHIP_ID, which we abuse here.
+ */
+
+static struct phy_driver cs4340_driver = {
+	.phy_id		= 0x13e51002,
+	.name		= "cs4340",
+	.phy_id_mask	= 0xfffffff0,
+	.config_aneg	= cs4340_config_aneg,
+	.read_status	= cs4340_read_status,
+	.probe		= cs4340_probe,
+};
+
+static int __init cs4340_init(void)
+{
+	return phy_driver_register(&cs4340_driver);
+}
+module_init(cs4340_init);
+
+static void __exit cs4340_exit(void)
+{
+	phy_driver_unregister(&cs4340_driver);
+}
+module_exit(cs4340_exit);
-- 
2.10.2

